#import <Foundation/Foundation.h>
#import "ASPAssignmentItemsResponse.h"
#import "ASPAssignmentItemResponse.h"
#import "ASPAssignmentResponse.h"
#import "ASPBaseResponse.h"
#import "ASPCalendarItemsResponse.h"
#import "ASPCalendarItemResponse.h"
#import "ASPCalendar.h"
#import "ASPCalendarResponse.h"
#import "ASPCalendarExceptionsResponse.h"
#import "ASPCalendarException.h"
#import "ASPTaskItemsResponse.h"
#import "ASPDocumentPropertiesResponse.h"
#import "ASPDocumentPropertyResponse.h"
#import "ASPDocumentProperty.h"
#import "ASPExtendedAttributeItemsResponse.h"
#import "ASPExtendedAttributeResponse.h"
#import "ASPOutlineCodeItemsResponse.h"
#import "ASPOutlineCodeResponse.h"
#import "ASPResourceItemsResponse.h"
#import "ASPResourceItemResponse.h"
#import "ASPResourceResponse.h"
#import "ASPAssignmentsResponse.h"
#import "ASPTaskLinksResponse.h"
#import "ASPTaskLink.h"
#import "ASPTaskLinkResponse.h"
#import "ASPTaskItemResponse.h"
#import "ASPTaskResponse.h"
#import "ASPRecurringInfoResponse.h"
#import "ASPWBSDefinitionResponse.h"
#import "ASPObject.h"
#import "ASPApiClient.h"
#import "ASPTaskDocumentResponse.h"

/**
 * NOTE: This class is auto generated by the swagger code generator program. 
 * https://github.com/swagger-api/swagger-codegen 
 * Do not edit the class manually.
 */

@interface ASPTasksApi: NSObject

@property(nonatomic, assign)ASPApiClient *apiClient;

-(instancetype) initWithApiClient:(ASPApiClient *)apiClient;
-(void) addHeader:(NSString*)value forKey:(NSString*)key;
-(unsigned long) requestQueueSize;
+(ASPTasksApi*) apiWithHeader:(NSString*)headerValue key:(NSString*)key;

///
///
/// Get a project document in specified format.
///
///
/// @param name The name of the file.
/// @param format
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return NSURL*
-(NSNumber*) getTaskDocumentWithFormatWithCompletionBlock :(NSString*) name
                                                    format:(NSString*) format
                                                   storage:(NSString*) storage
                                                    folder:(NSString*) folder

                                         completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;



///
///
/// Represents a project document.
///
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
///
///
/// @return ASPTaskDocumentResponse*
-(NSNumber*) getTaskDocumentWithCompletionBlock :(NSString*) name
                                         storage:(NSString*) storage
                                          folder:(NSString*) folder

                               completionHandler: (void (^)(ASPTaskDocumentResponse* output, NSError* error))completionBlock;
    


///
///
/// Read project assignment items.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAssignmentItemsResponse*
-(NSNumber*) getProjectAssignmentsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAssignmentItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds a new assignment to a project and returns assignment item in a response.
/// 
///
/// @param name The name of the file.
/// @param taskUid The unique id of the task to be assigned.
/// @param resourceUid The unique id of the resource to be assigned.
/// @param units The units for the new assignment. Default value is 1.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAssignmentItemResponse*
-(NSNumber*) postProjectAssignmentWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     resourceUid:(NSNumber*) resourceUid 
     units:(NSNumber*) units 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAssignmentItemResponse* output, NSError* error))completionBlock;
    


///
///
/// Read project assignment.
/// 
///
/// @param name The name of the file.
/// @param assignmentUid Assignment Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAssignmentResponse*
-(NSNumber*) getProjectAssignmentWithCompletionBlock :(NSString*) name 
     assignmentUid:(NSNumber*) assignmentUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAssignmentResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes a project assignment with all references to it.
/// 
///
/// @param name The name of the file.
/// @param assignmentUid assignment Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteProjectAssignmentWithCompletionBlock :(NSString*) name 
     assignmentUid:(NSNumber*) assignmentUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read project calendar items.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCalendarItemsResponse*
-(NSNumber*) getProjectCalendarsWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCalendarItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds a new calendar to project file.
/// 
///
/// @param name The name of the file.
/// @param calendar Calendar DTO
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCalendarItemResponse*
-(NSNumber*) postProjectCalendarWithCompletionBlock :(NSString*) name 
     calendar:(ASPCalendar*) calendar 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCalendarItemResponse* output, NSError* error))completionBlock;
    


///
///
/// Represents a project calendar.
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCalendarResponse*
-(NSNumber*) getProjectCalendarWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCalendarResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes a project calendar
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteProjectCalendarWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get list of calendar exceptions.
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPCalendarExceptionsResponse*
-(NSNumber*) getCalendarExceptionsWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPCalendarExceptionsResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds a new calendar exception to a calendar.
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param calendarException CalendarException DTO
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postCalendarExceptionsWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     calendarException:(ASPCalendarException*) calendarException 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates calendar exception.
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param index Calendar exception index
/// @param calendarException CalendarException DTO
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putCalendarExceptionWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     index:(NSNumber*) index 
     calendarException:(ASPCalendarException*) calendarException 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes calendar exception from calendar exceptions collection.
/// 
///
/// @param name The name of the file.
/// @param calendarUid Calendar Uid
/// @param index Calendar exception index
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteCalendarExceptionWithCompletionBlock :(NSString*) name 
     calendarUid:(NSNumber*) calendarUid 
     index:(NSNumber*) index 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Returns created report in PDF format.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPTaskItemsResponse*
-(NSNumber*) getCriticalPathWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTaskItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document properties.
/// 
///
/// @param name The document name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentPropertiesResponse*
-(NSNumber*) getDocumentPropertiesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentPropertiesResponse* output, NSError* error))completionBlock;
    


///
///
/// Read document property by name.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) getDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Set/create document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param _property {DocumentProperty} with new property value.
/// @param storage The document storage.
/// @param folder The document folder.
/// @param filename Name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) putDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     _property:(ASPDocumentProperty*) _property 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     filename:(NSString*) filename 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Set/create document property.
/// 
///
/// @param name The document name.
/// @param propertyName The property name.
/// @param _property {DocumentProperty} with new property value.
/// @param storage The document storage.
/// @param folder The document folder.
/// @param filename Name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPDocumentPropertyResponse*
-(NSNumber*) postDocumentPropertyWithCompletionBlock :(NSString*) name 
     propertyName:(NSString*) propertyName 
     _property:(ASPDocumentProperty*) _property 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     filename:(NSString*) filename 
    
    completionHandler: (void (^)(ASPDocumentPropertyResponse* output, NSError* error))completionBlock;
    


///
///
/// Represents a project document.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPExtendedAttributeItemsResponse*
-(NSNumber*) getExtendedAttributesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPExtendedAttributeItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Represents a project extended attribute definition.
/// 
///
/// @param name The name of the file.
/// @param index Index of extended attribute
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPExtendedAttributeResponse*
-(NSNumber*) getExtendedAttributeByIndexWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPExtendedAttributeResponse* output, NSError* error))completionBlock;
    


///
///
/// Delete a project extended attribute.
/// 
///
/// @param name The name of the file.
/// @param index Index of extended attribute
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteExtendedAttributeByIndexWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read outline codes.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPOutlineCodeItemsResponse*
-(NSNumber*) getOutlineCodesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPOutlineCodeItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Get outline code by index.
/// 
///
/// @param name The name of the file.
/// @param index Outline code index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPOutlineCodeResponse*
-(NSNumber*) getOutlineCodeByIndexWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPOutlineCodeResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes a project outline code
/// 
///
/// @param name The name of the file.
/// @param index Outline code index
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteOutlineCodeByIndexWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Returns created report in PDF format.
/// 
///
/// @param name The name of the file.
/// @param type A type of the project&#39;s graphical report.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return NSURL*
-(NSNumber*) getReportPdfWithCompletionBlock :(NSString*) name 
     type:(NSString*) type 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(NSURL* output, NSError* error))completionBlock;
    


///
///
/// Read project resources.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPResourceItemsResponse*
-(NSNumber*) getProjectResourcesWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPResourceItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Add a new resource to a project.
/// 
///
/// @param name The name of the file.
/// @param resourceName The name of the new resource. The default value is an empty string
/// @param beforeResourceId The id of the resource to insert the new resource before. The default value is the id of the last resource in a project file.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPResourceItemResponse*
-(NSNumber*) postProjectResourceWithCompletionBlock :(NSString*) name 
     resourceName:(NSString*) resourceName 
     beforeResourceId:(NSNumber*) beforeResourceId 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPResourceItemResponse* output, NSError* error))completionBlock;
    


///
///
/// Get project resource.
/// 
///
/// @param name The name of the file.
/// @param resourceUid Resource Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPResourceResponse*
-(NSNumber*) getProjectResourceWithCompletionBlock :(NSString*) name 
     resourceUid:(NSNumber*) resourceUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPResourceResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes a project resource with all references to it
/// 
///
/// @param name The name of the file.
/// @param resourceUid Resource Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteProjectResourceWithCompletionBlock :(NSString*) name 
     resourceUid:(NSNumber*) resourceUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get resource assignments.
/// 
///
/// @param name The name of the file.
/// @param resourceUid Resource Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAssignmentsResponse*
-(NSNumber*) getResourceAssignmentsWithCompletionBlock :(NSString*) name 
     resourceUid:(NSNumber*) resourceUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAssignmentsResponse* output, NSError* error))completionBlock;
    


///
///
/// Read task links.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPTaskLinksResponse*
-(NSNumber*) getTaskLinksWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTaskLinksResponse* output, NSError* error))completionBlock;
    


///
///
/// Adds a new task link to a project.
/// 
///
/// @param name The name of the file.
/// @param dto TaskLink dto
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) postTaskLinkWithCompletionBlock :(NSString*) name 
     dto:(ASPTaskLink*) dto 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates task link.
/// 
///
/// @param name The name of the file.
/// @param index Task link index
/// @param dto TaskLink dto
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPTaskLinkResponse*
-(NSNumber*) putTaskLinkWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     dto:(ASPTaskLink*) dto 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPTaskLinkResponse* output, NSError* error))completionBlock;
    


///
///
/// Updates task link.
/// 
///
/// @param name The name of the file.
/// @param index Task link index
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteTaskLinkWithCompletionBlock :(NSString*) name 
     index:(NSNumber*) index 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Read project task items.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPTaskItemsResponse*
-(NSNumber*) getProjectTasksWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTaskItemsResponse* output, NSError* error))completionBlock;
    


///
///
/// Add a new task to a project.
/// 
///
/// @param name The name of the file.
/// @param taskName The name of the new task. The default value is an empty string
/// @param beforeTaskId The id of the task to insert the new task before. The default value is the id of the last task in a project file.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPTaskItemResponse*
-(NSNumber*) postProjectTaskWithCompletionBlock :(NSString*) name 
     taskName:(NSString*) taskName 
     beforeTaskId:(NSNumber*) beforeTaskId 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTaskItemResponse* output, NSError* error))completionBlock;
    


///
///
/// Read project task.
/// 
///
/// @param name The name of the file.
/// @param taskUid Task Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPTaskResponse*
-(NSNumber*) getProjectTaskWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPTaskResponse* output, NSError* error))completionBlock;
    


///
///
/// Deletes a project task with all references to it and rebuilds tasks tree.
/// 
///
/// @param name The name of the file.
/// @param taskUid Task Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) deleteProjectTaskWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
     fileName:(NSString*) fileName 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get task assignments.
/// 
///
/// @param name The name of the file.
/// @param taskUid Task Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPAssignmentsResponse*
-(NSNumber*) getTaskAssignmentsWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPAssignmentsResponse* output, NSError* error))completionBlock;
    


///
///
/// Move one task to another parent task
/// 
///
/// @param name The name of the file.
/// @param taskUid Task Uid
/// @param parentTaskUid Uniquer id of the task.This task represent parent task for another task.
/// @param fileName The name of the project document to save changes to. If this parameter is omitted then the changes will be saved to the source project document.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPBaseResponse*
-(NSNumber*) putMoveTaskWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     parentTaskUid:(NSNumber*) parentTaskUid 
     fileName:(NSString*) fileName 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPBaseResponse* output, NSError* error))completionBlock;
    


///
///
/// Get recurring info for the task
/// 
///
/// @param name The name of the file.
/// @param taskUid Task Uid
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPRecurringInfoResponse*
-(NSNumber*) getTaskRecurringInfoWithCompletionBlock :(NSString*) name 
     taskUid:(NSNumber*) taskUid 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPRecurringInfoResponse* output, NSError* error))completionBlock;
    


///
///
/// Get project WBS Definition.
/// 
///
/// @param name The name of the file.
/// @param storage The document storage.
/// @param folder The document folder.
/// 
///
/// @return ASPWBSDefinitionResponse*
-(NSNumber*) getProjectWbsDefinitionWithCompletionBlock :(NSString*) name 
     storage:(NSString*) storage 
     folder:(NSString*) folder 
    
    completionHandler: (void (^)(ASPWBSDefinitionResponse* output, NSError* error))completionBlock;
    



@end
